[{"name": "app.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny.express import input, render, ui\n\nui.input_slider(\"radius\", \"Radius [nm]\", 1, 100, 20)\nui.input_slider(\"wavelength\", \"Wavelength [nm]\", 1, 10, 1)\n\n@render.plot(alt=\"A histogram\")  \ndef plot():\n\n    radius = input.radius()\n    wavelength = input.wavelength()\n\n    delta = 1e-5  # n = 1 - delta + i*beta\n    beta = 0\n\n    dynamic_range = 5\n\n    z_det = 0.1 #[m]\n\n    msft_npix_real = 32\n    msft_npix_fourier = 128\n    box_delta = 2 * radius / (msft_npix_real - 1)\n    k_0 = 2 * np.pi / wavelength  # [1/m]\n\n    msft_real_axis = np.linspace(-1, 1, msft_npix_real) * radius\n    X, Y, Z = np.meshgrid(msft_real_axis, msft_real_axis, msft_real_axis)\n    msft_density = (delta - 1j*beta) * (X ** 2 + Y ** 2 + Z ** 2 < radius ** 2)\n\n    Q_perp_cut = np.fft.fftshift(np.fft.fftfreq(msft_npix_fourier, d=box_delta / (2 * np.pi)))\n    Q_X, Q_Y = np.meshgrid(Q_perp_cut, Q_perp_cut, indexing='ij')\n    Q_Z = k_0 - np.emath.sqrt(k_0 ** 2 - Q_X ** 2 - Q_Y ** 2)\n    Q_angles = np.arcsin(np.sqrt(Q_X ** 2 + Q_Y ** 2) / k_0)\n\n    padding = msft_npix_fourier // 2 - msft_npix_real // 2\n\n    ## Polarization map\n    PolMap = 1 - (Q_Y/k_0)**2\n    PolMap[Q_X**2 + Q_Y**2 > k_0**2] = np.nan\n\n    msft_image = np.fft.fftshift(np.fft.fft2(np.sum(msft_density, axis=0), s=(msft_npix_fourier, msft_npix_fourier))) * box_delta**2 * 1/(2 * np.pi)\n    #cull evanescent waves\n    msft_image[Q_X**2 + Q_Y**2 > k_0**2] = np.nan\n    msft_image *= k_0/z_det\n    msft_image = PolMap * np.abs(msft_image**2)\n\n    fig, ax = plt.subplots()\n    max_val = np.nanmax(np.log10(msft_image))\n    ax.imshow(np.log10(msft_image), cmap='turbo', vmin=max_val - dynamic_range, vmax=max_val)\n    return fig  ", "type": "text"}, {"name": "requirements.txt", "content": "matplotlib\nnumpy", "type": "text"}]